//--------------GCD

long long hcf( long long a, long long b ){
  long long c;
  while( a != 0 ) {
     c = a; a = b%a;  b = c;
  }
  return b;
}

//------------Fibonacci Numbers

    int ii=2;
    long long n1,n2,fib;
    long long arr[100];
    arr[0]=0;
    arr[1]=1;
    while(ii<93){
        arr[ii]=arr[ii-1]+arr[ii-2];
        ii++;
    }
    


//------------prime number


	const long long SIZE=100000;
	long long prime[SIZE];
	prime[0]=2;
	
	
	long long i=3,k=1;
	
	while(i<SIZE){
		bool flag=true;
		long long j=0;
		while(j<k){
			if(i%prime[j]==0){
				flag=false;
				break;
		    	}
		   j++;
		}
		if(flag){
			prime[k++]=i;
			  //if(i<1000)
		     //	cout<<prime[k-1]<<endl;
		}
		i=i+2;
	}



//------------fastpower x raised to y

long long powX(long long x,long long y){
	if(y==0)
	    return 1;
	else if(y==1)
		return x;
	else if(y%2==0)
		return powX(x,y/2)*powX(x,y/2);
	else
	 	return powX(x,y/2)*powX(x,y/2)*x;

}



//--------------------------max(x,y)-

long long max(long long x, long long y){
	return x<y?y:x;
}


//-------------------------min(x,y)

long long min(long long x, long long y){
	return x<y?x:y;
}

//---------Reverse String

string revString(string s){
	long long i=0,len=s.length();
	char *tstring=new char[len+1];
	while(i<len){
		tstring[i]=s[len-1-i];
		i++;
	}
	tstring[len]='\0';
	return string(tstring);
}

//------------Palindrome checker
bool isPalindrome(string s){
	long long i=0,len=s.length();
	bool flag=true;
	while(i<len/2){
		if(s[i]!=s[len-1-i]){
			flag=false;
			break;
			}
			i++;
	}
	return flag;
}



//////////////////////////Trie data structure--------/////////////////////////////////

#include<string>
#include<iostream>
#include<cstring>
#include<fstream>
using namespace std;
class Node{
	Node *arr[26];
	bool flag;
	public:
		Node(){
			int SIZE=26;
			for(int i=0;i<SIZE;i++)
				arr[i]=nullptr;
			flag=false;
		}
	
		bool strinsert(string str,int index=0){
			if(str[index]=='\0' && index!=0){ //prevent insertion of empty string
				flag=true;
				return true;
			}	
			
			if(str[index]<65||str[index]>122||(str[index]>90 && str[index]<97)){
				if(index!=0)
					flag=true;//Discard other characters when encounter first non Roman alphabets eg. "Mango9"   ----stores-----> "Mango"
				return false;	
			}
			
			int sub=65;
			if(str[index]>90)
				sub=97;
			if(arr[str[index]-sub]==nullptr){
				if(str[index]>=65 && str[index]<=90 ){
					arr[str[index]-65]=new Node;
					return true && arr[str[index]-65]->strinsert(str, index+1);
				}
				if(str[index]>=97 && str[index]<=122 ){
					arr[str[index]-97]=new Node;
					return true && arr[str[index]-97]->strinsert(str, index+1);
				}
			}else{
				if(str[index]>=65 && str[index]<=90 ){
					return true && arr[str[index]-65]->strinsert(str, index+1);
				}
				if(str[index]>=97 && str[index]<=122 ){
					return true && arr[str[index]-97]->strinsert(str, index+1);
				}
			}
			
		}
				
		bool strinsert(char *str,int index=0){
			if(str[index]=='\0' && index!=0){
					flag=true;
					return true;
			}
			
			
			if(str[index]<65||str[index]>122||(str[index]>90 && str[index]<97)){
				if(index!=0)
					flag=true;
				return false;
			}
					
			int sub=65;
			if(str[index]>90)
				sub=97;	
			if(sub==65){
				if(arr[str[index]-sub]==nullptr){
						if(str[index]>=65 && str[index]<=90 )
							arr[str[index]-65]=new Node;
						return	true && arr[str[index]-65]->strinsert(str, index+1);
				}
				else{
						return	true && arr[str[index]-65]->strinsert(str, index+1);
			    }
			    
			}
			else{
				if(str[index]>=97 && str[index]<=122 && (arr[str[index]-sub]==nullptr)){
						arr[str[index]-97]=new Node;
			    		return 	true && arr[str[index]-97]->strinsert(str, index+1);
				}
				else{
					return	true && arr[str[index]-97]->strinsert(str, index+1);
				}
			}
	   }

		bool search(string str,int index=0){
			if(str[index]=='\0' && str.length()==index) //Returns only if length of search word equals word dictionary
				return flag;
			if(str[index]>=65 && str[index]<=90 ){
			
				if(arr[str[index]-65]!=nullptr)
					return (true && arr[str[index]-65]->search(str,index+1));
						
			}
			
			if(str[index]>=97 && str[index]<=122 ){
				if(arr[str[index]-97]!=nullptr)
					return (true && arr[str[index]-97]->search(str,index+1));
		   }
			return false;///Handles those situation where a non Roman Alphabet is present in Search word eg..  "c88pp"
		}
		
		bool search(char *str,int index=0){
			if(str[index]=='\0'){
				return flag;
			}
			
			if(str[index]>=65 && str[index]<=91 ){
			
				if(arr[str[index]-65]!=nullptr)
					return (true && arr[str[index]-65]->search(str,index+1));
		   }
		   
			if(str[index]>=97 && str[index]<=122 ){
		
				if(arr[str[index]-97]!=nullptr)
					return (true && arr[str[index]-97]->search(str,index+1));
		   }
			return false;
		}	
};

class Dict{
	public:
		Node root;
};

int main(){	
	Node n;
	string s="RAKabcdef";
	n.strinsert(s);
	
//Reading from file to build dictionary
	ifstream i;
	i.open("input.txt");
	ofstream o;
	o.open("output.txt");
	int counter=0;
	string temp;
	
	while(i){		//Inserting into Trie Datastructure
		i>>temp;
		n.strinsert(temp);
	
	}

	//Ask iteratively for "string to search"
	string istr;
	while(istr.compare("exit")!=0){ 
		cout<<"Search >> ";
		cin>>istr;
		if(n.search(istr))
			cout<<endl<<"\t\t\t"<<istr<<endl<<"\t\t\tFound !"<<endl<<endl;
		else
			cout<<endl<<"\t\t\t"<<istr<<endl<<"\t\t\tNot Found"<<endl<<endl;
	}

}


////////////////////////////-------------------------------------/////////////////////////////////////